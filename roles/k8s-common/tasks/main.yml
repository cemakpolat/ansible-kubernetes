---
- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install required packages
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - software-properties-common
    state: present

- name: Disable swap
  shell: |
    swapoff -a
    sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
  when: disable_swap | default(true)

- name: Load kernel modules
  modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter

- name: Set kernel modules to load on boot
  copy:
    content: |
      overlay
      br_netfilter
    dest: /etc/modules-load.d/k8s.conf

- name: Set sysctl parameters
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
  loop:
    - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
    - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
    - { name: 'net.ipv4.ip_forward', value: '1' }

- name: Install containerd
  apt:
    name: containerd
    state: present

- name: Create containerd configuration directory
  file:
    path: /etc/containerd
    state: directory

- name: Generate containerd configuration
  shell: containerd config default > /etc/containerd/config.toml

- name: Configure containerd to use systemd cgroup driver
  replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'

- name: Restart and enable containerd
  systemd:
    name: containerd
    state: restarted
    enabled: yes

- name: Add Kubernetes apt key
  apt_key:
    url: "{{ kubernetes_repo_key }}"
    state: present

- name: Add Kubernetes apt repository
  apt_repository:
    repo: "{{ kubernetes_repo }}"
    state: present

- name: Install Kubernetes packages
  apt:
    name:
      - kubelet={{ k8s_version }}.*
      - kubeadm={{ k8s_version }}.*
      - kubectl={{ k8s_version }}.*
    state: present
    update_cache: yes

- name: Hold Kubernetes packages
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl

- name: Enable and start kubelet
  systemd:
    name: kubelet
    enabled: yes
    state: started

- name: Create CNI bin directory
  file:
    path: /opt/cni/bin
    state: directory
    mode: '0755'

- name: Download and install CNI plugins
  unarchive:
    src: https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz
    dest: /opt/cni/bin/
    remote_src: yes
    creates: /opt/cni/bin/loopback
